#!/bin/bash
# icons
# ‚ùå‚è≥üíÄüéâ ‚ÑπÔ∏è ‚ö†Ô∏è üöÄ ‚úÖ ‚ôª üöÆ üõ° üîß  ‚öô 


#######################################################################
##             Debian - Basic Set Up Script           ##
#######################################################################
# To loginto a droplet from WSL ==> ssh root@<IP>

# ssh-keygen -t rsa -b 4096 -C "leighton@clucas.xxx"
# pub key in /.ssh
# copy to github

# to install:-
#   need to first install curl ==> apt install curl
#   then:-
#   curl -k -s https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/main_4 | bash
#   curl -k -s https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/main_4 | bash -s -- wsl

#       -s --> True if file exists and has a size greater than zero.



# 

# Used for debugging
#set -x
#xPS4='$(tput setaf 9)$(printf "%-12s\\t%.3fs\\t@line\\t%-10s" $(date +%T) $(echo $(date "+%s.%3N")-'$(date "+%s.%3N")' | bc ) $LINENO)$(tput sgr 0)'
#   ref: https://spencersmolen.com/debugging-bash/
# set colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE="\033[01;34m" # Heading
NO_COLOR='\033[0m'
CLEAR_LINE='\r\033[K'
BOLD="\033[01;01m" # Highlight
RESET="\033[00m" # Normal
SECONDS=0
s=4                          # Slows scritpt down so you can see whats going on

# Function to create a sudo wrapper
create_sudo_wrapper() {
    local temp_script=$(mktemp)
    cat > "$temp_script" << 'EOF'
#!/bin/bash
# Wrapper script to run the main script with sudo
if ! sudo -v &> /dev/null; then
    echo "This script requires sudo privileges. Please ensure you have sudo access."
    exit 1
fi

# Keep sudo alive
while true; do
    sudo -n true
    sleep 60
    kill -0 "$$" || exit
done 2>/dev/null &

# Download and run the main script with sudo
sudo bash -c "$(curl -k -s https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/main_4)"
EOF
    chmod +x "$temp_script"
    exec "$temp_script"
}

# Check if running as root, if not use sudo wrapper
if [[ "${EUID}" -ne 0 ]]; then
    echo -e ' '${RED}'[!]'${RESET}" This script must be run with root privileges"
    echo -e ' '${RED}'[!]'${RESET}" Creating sudo wrapper..."
    create_sudo_wrapper
    exit 0
fi

# ensure clean logs
# rm script*

echo -e "  üöÄ ${RED}Starting Droplet setup script${RESET}"

sleep $s

compute_start_time() {
    start_time=$(date +%s)
    echo "\n\n Install started - $start_time \n" > script.log
}

system_update() {
printf '\n============================================================\n'
printf '   ‚è≥ Updating System\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt update && apt upgrade -y && apt autoremove -y -qq >> script.log 2>>script_error.log    # what is -qq doing?
}
install_misc() {
printf '\n============================================================\n'
printf '    ‚è≥ Install Misc\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt install wget -y >> script.log 2>>script_error.log
apt install ruby -y >> script.log 2>>script_error.log
apt install git -y >> script.log 2>>script_error.log
apt install build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev  libgmp-dev zlib1g-dev -y >> script.log 2>>script_error.log
apt install nmap -y >> script.log 2>>script_error.log
apt install whois -y >> script.log 2>>script_error.log
apt install dnsutils -y >> script.log 2>>script_error.log              # dig & nslookup
apt install tree -y >> script.log 2>>script_error.log
apt install figlet toilet -y >> script.log 2>>script_error.log           # install figlet for banners
apt install neofetch -y >> script.log 2>>script_error.log
apt install btop -y >> script.log 2>>script_error.log
apt install fzf -y >> script.log 2>>script_error.log
apt install tldr -y >> script.log 2>>script_error.log
}

install_tmux() {
printf '\n============================================================\n'
printf '   ‚è≥ Install tmux ref & custom config https://github.com/hamvocke/dotfiles/tree/master/tmux\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt install tmux -y -q >> script.log 2>>script_error.log
# wget https://raw.githubusercontent.com/hamvocke/dotfiles/master/tmux/.tmux.conf -> now install using STOW
# wget https://raw.githubusercontent.com/hamvocke/dotfiles/master/tmux/tmux_colors.sh
# chmod +x tmux_colors.sh
# ./tmux_colors.sh
}

install_digall() {
printf '\n============================================================\n'
printf '    ‚è≥ install digall\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/FreedomBen/digall/main/digall && chmod +x digall
# installs an automated script for dig
# Ref:- https://github.com/FreedomBen/digall
# Use :- ./digall example.com
}

add_to_bashrc() {
printf '\n============================================================\n'
printf '[+]  ‚è≥ Make additions to .bashrc. \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s

if [ ! -f ~/.bashrc.bak ]; then                                                      # Check if bashrc.bak has already been copied. If yes then skip
    cp ~/.bashrc ~/.bashrc.bak                                             # bak Up bashrc incase I fuck it up

cat <<"EOF" >>.bashrc                    #Add pointer to new .bash_aliases

# '================Added by me ==================================\n\n'

if [ -f ~/.bash_aliases ]; then
. ~/.bash_aliases
fi

if [ -f ~/.bash_functions ]; then
. ~/.bash_functions
fi

if [ -f ~/.env ]; then
. ~/.env
fi

PS1="SHELL:${SHLVL} \W\$ "
export PS1
EOF
fi
. .bashrc && . .bash_aliases
}

update_sources() {
    printf '\n============================================================\n'
    printf '[+]  ‚è≥ Update sources to bookworm \n' | tee -a script.log
    printf '============================================================\n\n'
    sleep $s

    if [ ! -f /etc/apt/sources.list.bak ]; then
        # Backup the sources.list file and handle errors
        cp /etc/apt/sources.list /etc/apt/sources.list.bak || {
            echo "Error: Failed to backup /etc/apt/sources.list" | tee -a script_error.log
            exit 1
        }
        # Update the sources.list file and handle errors
        cat <<"EOF" > /etc/apt/sources.list || {
            echo "Error: Failed to update /etc/apt/sources.list" | tee -a script_error.log
            exit 1
        }
deb http://deb.debian.org/debian bookworm main
deb http://deb.debian.org/debian bookworm-updates main
deb http://deb.debian.org/debian-security bookworm-security main
EOF
    fi
}



install_nano() {
    printf '\n============================================================\n'
    printf '[+]  ‚è≥ Install nano text editor from binaries. \n' | tee -a script.log
    printf '============================================================\n\n'
    sleep $s
    # Download nano and handle errors
    wget https://www.nano-editor.org/dist/v7/nano-7.2.tar.gz || {
        echo "Error: Failed to download nano" | tee -a script_error.log
        exit 1
    }
    # Extract nano and handle errors
    tar -zxvf nano-7.2.tar.gz || {
        echo "Error: Failed to extract nano" | tee -a script_error.log
        exit 1
    }
    # Change directory and handle errors
    cd nano-7.2 || {
        echo "Error: Failed to change directory to nano-7.2" | tee -a script_error.log
        exit 1
    }
    # Install dependencies and handle errors
    apt install libncurses-dev || {
        echo "Error: Failed to install libncurses-dev" | tee -a script_error.log
        exit 1
    }
    # Configure, make, and install nano, handling errors at each step
    ./configure || {
        echo "Error: Failed to configure nano" | tee -a script_error.log
        exit 1
    }
    make || {
        echo "Error: Failed to make nano" | tee -a script_error.log
        exit 1
    }
    make install || {
        echo "Error: Failed to install nano" | tee -a script_error.log
        exit 1
    }
    # Set up color text for nano
    find /usr/share/nano/ -iname "*.nanorc" -exec echo include {} \; >> ~/.nanorc
    cat > "~/.nanorc" <<EOF
## Some defaults
set autoindent
set historylog
set indicator
set linenumbers
set locking
set mouse
set softwrap
set stateflags
set tabsize 4
set tabstospaces
## Enable syntax highlighting in Nano
include ~/.nano/syntax/*.nanorc
EOF
}

install_python() {
printf '\n============================================================\n'
printf '  ‚è≥ Install python & PIP. \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
#     python3 seems ot be installed by default on debian but not pip3 it seems!!
# apt-get install python3.11.2
#     get error ==> "error: externally-managed-environment" when try & install pip. rectify with:-
cd /usr/lib/python3.11
rm EXTERNALLY-MANAGED
cd ~
apt install python3-pip -y -q >> script.log 2>>script_error.log
}

install_docker() {
printf '\n============================================================\n'
printf ' ‚è≥  Install docker \n' | tee -a script.log
print '[+] link --> https://docs.docker.com/engine/install/debian/#install-using-the-repository \n'
printf '============================================================\n\n'
sleep $s
# Add Docker's official GPG key:
apt-get update
apt-get install ca-certificates curl gnupg
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
chmod a+r /etc/apt/keyrings/docker.asc
# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
# install docker package
apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
printf '\n\n'
printf '**********\n'
printf 'Verify that the installation is successful by running the hello-world image:'
docker run hello-world
printf '**********\n'
printf '\n\n'
sleep 5
}

install_golang() {
printf '\n============================================================\n'
printf ' ‚è≥  Install golang 1.21.1 \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt-get update
wget https://go.dev/dl/go1.21.0.linux-amd64.tar.gz
tar -xvf go1.21.0.linux-amd64.tar.gz
mv go /usr/local
export GOROOT=/usr/local/go
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
source ~/.profile
# ref:- https://royzsec.medium.com/install-go-1-21-0-in-ubuntu-22-04-2-in-5-minutes-468a5330c64e
}

install_PD_subfinder() {
printf '\n============================================================\n'
printf ' ‚è≥  Install projectdiscovery subfinder \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
echo export PATH=$PATH:$HOME/go/bin >> $home/.bashrc
source $home/.bashrc
}

install_hakoriginfiinder() {
printf '\n============================================================\n'
printf ' ‚è≥  Install hakoriginfinder\n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
go install github.com/hakluke/hakoriginfinder@latest
apt install prips -y
}

install_WPScan() {
printf '\n============================================================\n'
printf ' ‚è≥  Install WPScan \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt install build-essential libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev  libgmp-dev zlib1g-dev -y
gem install wpscan                                  #install wpscan
}

install_lsd() {
printf '\n============================================================\n'
printf ' ‚è≥  Install LSDelux Ref:- https://github.com/lsd-rs/lsd \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
apt install lsd
}


install_fabric() {
printf '\n============================================================\n'
printf ' ‚è≥  Install Fabric Ref:- https://github.com/danielmiessler/fabric \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
go install github.com/danielmiessler/fabric@latest
# Golang environment variables
export GOROOT=/usr/local/go
export GOPATH=$HOME/go

# Update PATH to include GOPATH and GOROOT binaries
export PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH


}


install_proxychains() {
printf '\n============================================================\n'
printf ' ‚è≥  Install Proxychains ref- https://github.com/SagaOfAGuy/proxychains-config/tree/main \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
wget https://raw.githubusercontent.com/leighton-0/DigitalOcean_Droplet_Setup/main/proxychains_config.sh
chmod +x proxychains_config.sh
./proxychains_config.sh
}

install_nse_scripts() {
printf '\n============================================================\n'
printf '  ‚è≥  cp nse scripts & themes & plugin from https://github.com/hackertarget/nmap-nse-scripts \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
mkdir ~/nmap-nse-scripts
cd ~/nmap-nse-scripts/
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/hostmap-hackertarget.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-info.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-plugins.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-themes.nse
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-plugins.lst
wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-themes.lst
cp ~/nmap-nse-scripts/hostmap-hackertarget.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-info.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-plugins.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/http-wordpress-themes.nse /usr/share/nmap/scripts
cp ~/nmap-nse-scripts/wp-plugins.lst /usr/share/nmap/nselib/data/
cp ~/nmap-nse-scripts/wp-themes.lst /usr/share/nmap/nselib/data/
}

install_DO_Metrics_Agent() {
printf '\n============================================================\n'
printf ' ‚è≥  Upgrade DigitalOcean Metrics Agent \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
# Ref https://docs.digitalocean.com/products/monitoring/how-to/upgrade-legacy-agent/
# Uninstall the legacy metrics agent.
apt purge do-agent -y
# Install the current metrics agent
curl -sSL https://repos.insights.digitalocean.com/install.sh -o /tmp/install.sh
# run the installation using Bash:
bash /tmp/install.sh
}

setup_synlincs() {
ln -sf ~/mycode/repos/.dotfiles/bash_functions/.bash_functions ~/.bash_functions
ln -sf ~/mycode/repos/.dotfiles/bash_aliases/.bash_aliases ~/.bash_aliases
ln -sf /root/mycode/repos/.dotfiles/tmux/.tmux.conf ~/.tmux.conf
ln -sf ~/mycode/.env ~/.env
}

clone_repos() {
printf '\n============================================================\n'
printf ' ‚è≥  clone github repos to theit respective directories \n' | tee -a script.log
printf '============================================================\n\n'
sleep $s
mkdir -p ~/mycode/repos
cd ~/mycode/repos
git clone https://github.com/leighton-0/My_Random_Scripts
git clone https://github.com/leighton-0/cheat_sheets
git clone https://github.com/leighton-0/.dotfiles
git clone https://github.com/leighton-0/DigitalOcean_Droplet_Setup
cd ~/mycode/repos/.dotfiles
git remote set-url origin git@github.com:leighton-0/.dotfiles.git
cd ~/mycode/repos/My_Random_Scripts
git remote set-url origin git@github.com:leighton-0/My_Random_Scripts
cd ~/mycode/repos/cheat_sheets
git remote set-url origin git@github.com:leighton-0/cheat_sheets
cd ~/mycode/repos/DigitalOcean_Droplet_Setup
git remote set-url origin git@github.com:leighton-0/DigitalOcean_Droplet_Setup
git config --global user.name "Leighton"
git config --global user.email leighton@clucas.au
# Note  Need ot set up ssh keys for github ********************************
cd ~
mkdir zresults ztargets
# decrypt .env & move to ~/mycode.env
# ref https://www.linkedin.com/pulse/day-2-learn-bash-write-script-encrypt-filefolder-hasan-mahmud-
echo "enter the password"
read -s password
openssl enc -aes-256-cbc -d -in ~/mycode/repos/My_Random_Scripts/.env.enc -out ~/mycode/.env -k $password
        if [ -e ~/mycode/.env ]; then
                printf ".env file installed successfully\n"
        else
                printf " .env file failed to decrypted successfully\n"
        fi
. ~/.bashrc >/dev/null 2>&1     # runs script silently
printf "${RED}this should be in red to prove .env is working${NORMAL}\n"
}

compute_finish_time() {
    finish_time=$(date +%s)
    echo -e "  ‚åõ Time (roughly) taken: ${YELLOW}$(( $(( finish_time - start_time ))  )) seconds${RESET}"
    echo "\n\n Install completed - $finish_time \n" >> script.log
}

create_menu() {
    # Initialize arrays for menu options
    local options=()
    local selected=()
    
    # Define menu options (add all your installable components here)
    options=(
        "System Update" 
        "Miscellaneous Utilities" 
        "Tmux" 
        "Bash Configuration" 
        "Nano Editor" 
        "Python" 
        "Docker" 
        "Golang" 
        "Project Discovery Subfinder" 
        "Hakoriginfinder" 
        "WPScan" 
        "NSE Scripts" 
        "LSDeluxe" 
        "DO Metrics Agent" 
        "Symlinks Setup" 
        "Clone Repositories"
        "Fabric"
    )
    
    # Initialize all options as unselected (0)
    for i in "${!options[@]}"; do
        selected[$i]=0
    done

    while true; do
        clear
        echo -e "${BLUE}=== Installation Options ===${RESET}"
        echo "Use space to toggle selection, Enter to confirm"
        echo ""
        
        # Display menu
        for i in "${!options[@]}"; do
            if [ "${selected[$i]}" == "1" ]; then
                echo -e "[${GREEN}‚úì${RESET}] $((i+1)). ${options[$i]}"
            else
                echo -e "[ ] $((i+1)). ${options[$i]}"
            fi
        done
        
        # Get user input
        read -n 1 -s key
        
        case "$key" in
            # Enter key
            "")
                return 0
                ;;
            # Space key
            " ")
                read -n 1 -s num
                if [[ "$num" =~ ^[0-9]+$ ]]; then
                    index=$((num-1))
                    if [ "$index" -lt "${#options[@]}" ]; then
                        if [ "${selected[$index]}" == "1" ]; then
                            selected[$index]=0
                        else
                            selected[$index]=1
                        fi
                    fi
                fi
                ;;
        esac
    done
}

# Modify the main() function to use the menu
main() {
    compute_start_time
    
    # Show menu and get user selections
    create_menu
    
    # Install selected components based on menu choices
    if [ "${selected[0]}" == "1" ]; then
        update_sources
        system_update
    fi
    
    if [ "${selected[1]}" == "1" ]; then
        install_misc
    fi
    
    if [ "${selected[2]}" == "1" ]; then
        install_tmux
    fi
    
    if [ "${selected[3]}" == "1" ]; then
        add_to_bashrc
    fi
    
    if [ "${selected[4]}" == "1" ]; then
        install_nano
    fi
    
    if [ "${selected[5]}" == "1" ]; then
        install_python
    fi
    
    if [ "${selected[6]}" == "1" ]; then
        install_docker
    fi
    
    if [ "${selected[7]}" == "1" ]; then
        install_golang
    fi
    
    if [ "${selected[8]}" == "1" ]; then
        install_PD_subfinder
    fi
    
    if [ "${selected[9]}" == "1" ]; then
        install_hakoriginfiinder
    fi
    
    if [ "${selected[10]}" == "1" ]; then
        install_WPScan
    fi
    
    if [ "${selected[11]}" == "1" ]; then
        install_nse_scripts
    fi
    
    if [ "${selected[12]}" == "1" ]; then
        install_lsd
    fi
    
    if [ "${selected[13]}" == "1" ]; then
        install_DO_Metrics_Agent
    fi
    
    if [ "${selected[14]}" == "1" ]; then
        setup_synlincs
    fi
    
    if [ "${selected[15]}" == "1" ]; then
        clone_repos
    fi
    
    if [ "${selected[16]}" == "1" ]; then
        install_fabric
    fi
    
    compute_finish_time
}

# Use trap to handle unexpected errors and perform cleanup
trap 'echo "An error occurred. Exiting..."; exit 1;' ERR

# Check for arguments and call the appropriate function
if [[ "$1" == "wsl" ]]; then
    wsl
else
    main
fi

echo "  ‚úÖ THE END OF THE SCRIPT"
sleep ${s}

ELAPSED="Elapsed: $(($SECONDS / 3600))hrs $((($SECONDS / 60) % 60))min $(($SECONDS % 60))sec"
    printf "\n${CYAN}Finished - Runtime = ${ELAPSED}${NORMAL}\n"

# What to do now
# run ~/mycode/repo/My_Random_scripts/decrypt,sh, entering the password
