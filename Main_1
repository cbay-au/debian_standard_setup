#!/bin/bash

# Improved installation script with best practices generated by OPENHANDS. - needs review!!!!!

# Uses: set -euo pipefail, trap for cleanup, duplicate entry prevention in ~/.bashrc, and cleaner formatting

set -euo pipefail

# Set up environment variables
HOME_DIR="$HOME"
SCRIPT_LOG="script.log"
RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NORMAL='\033[0m'

# Trap to cleanup background sudo keep-alive process
cleanup() {
  if [[ -n "${SUDO_KEEPALIVE_PID:-}" ]]; then
    kill "$SUDO_KEEPALIVE_PID"
  fi
}
trap cleanup EXIT

# Log function with timestamps
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$SCRIPT_LOG"
}

compute_start_time() {
    start_time=$(date +%s)
    log "Starting script execution at $start_time"
}

system_update() {
    log "Updating system packages..."
    sudo apt update && sudo apt upgrade -y
}

install_misc() {
    log "Installing miscellaneous tools..."
    sudo apt install -y git curl wget vim htop
}

install_tmux() {
    log "Installing tmux..."
    sudo apt install -y tmux
}

add_to_bashrc() {
    log "Adding configurations to .bashrc..."
    local line_to_add='export PATH=$PATH:$HOME/go/bin'
    if ! grep -qxF "$line_to_add" "$HOME_DIR/.bashrc"; then
        echo "$line_to_add" >> "$HOME_DIR/.bashrc"
    fi
    # Sourcing .bashrc here is optional as it may not affect interactive shells
    # source "$HOME_DIR/.bashrc"
}

install_nano() {
    log "Installing nano..."
    sudo apt install -y nano
}

install_python() {
    log "Installing Python and pip..."
    sudo apt install -y python3 python3-pip
}

install_golang() {
    log "Installing Go..."
    if ! command -v go &> /dev/null; then
        wget https://golang.org/dl/go1.20.5.linux-amd64.tar.gz
        sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.20.5.linux-amd64.tar.gz
        rm go1.20.5.linux-amd64.tar.gz
        local line_to_add='export PATH=$PATH:/usr/local/go/bin'
        if ! grep -qxF "$line_to_add" "$HOME_DIR/.bashrc"; then
            echo "$line_to_add" >> "$HOME_DIR/.bashrc"
        fi
        # source "$HOME_DIR/.bashrc"
    else
        log "Go is already installed."
    fi
}

install_nse_scripts() {
    log "Copying NSE scripts..."
    local nse_dir="$HOME_DIR/nmap-nse-scripts"
    mkdir -p "$nse_dir"
    cd "$nse_dir" || exit 1
    wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/hostmap-hackertarget.nse
    wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-info.nse
    wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-plugins.nse
    wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/http-wordpress-themes.nse
    wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-plugins.lst
    wget https://raw.githubusercontent.com/hackertarget/nmap-nse-scripts/master/wp-themes.lst
    sudo cp "$nse_dir/hostmap-hackertarget.nse" /usr/share/nmap/scripts
    sudo cp "$nse_dir/http-wordpress-info.nse" /usr/share/nmap/scripts
    sudo cp "$nse_dir/http-wordpress-plugins.nse" /usr/share/nmap/scripts
    sudo cp "$nse_dir/http-wordpress-themes.nse" /usr/share/nmap/scripts
    sudo cp "$nse_dir/wp-plugins.lst" /usr/share/nmap/nselib/data/
    sudo cp "$nse_dir/wp-themes.lst" /usr/share/nmap/nselib/data/
}

install_lsd() {
    log "Installing lsd..."
    sudo apt install -y lsd
}

setup_synlincs() {
    log "Setting up symbolic links..."
    ln -sf "$HOME_DIR/mycode/repos/.dotfiles/bash_functions/.bash_functions" "$HOME_DIR/.bash_functions"
    ln -sf "$HOME_DIR/mycode/repos/.dotfiles/bash_aliases/.bash_aliases" "$HOME_DIR/.bash_aliases"
    ln -sf "$HOME_DIR/mycode/repos/tmux/.tmux.conf" "$HOME_DIR/.tmux.conf"
    ln -sf "$HOME_DIR/mycode/.env" "$HOME_DIR/.env"
}

clone_repos() {
    log "Cloning GitHub repositories..."
    local repos_dir="$HOME_DIR/mycode/repos"
    mkdir -p "$repos_dir"
    cd "$repos_dir" || exit 1

    # Clone repositories if they do not exist
    if [ ! -d "My_Random_Scripts" ]; then
        git clone https://github.com/leighton-0/My_Random_Scripts
    fi
    if [ ! -d "cheat_sheets" ]; then
        git clone https://github.com/leighton-0/cheat_sheets
    fi
    if [ ! -d ".dotfiles" ]; then
        git clone https://github.com/leighton-0/.dotfiles
    fi
    if [ ! -d "DigitalOcean_Droplet_Setup" ]; then
        git clone https://github.com/leighton-0/DigitalOcean_Droplet_Setup
    fi

    cd "$repos_dir/.dotfiles" || exit 1
    git remote set-url origin git@github.com:leighton-0/.dotfiles.git

    cd "$repos_dir/My_Random_Scripts" || exit 1
    git remote set-url origin git@github.com:leighton-0/My_Random_Scripts

    cd "$repos_dir/cheat_sheets" || exit 1
    git remote set-url origin git@github.com:leighton-0/cheat_sheets

    cd "$repos_dir/DigitalOcean_Droplet_Setup" || exit 1
    git remote set-url origin git@github.com:leighton-0/DigitalOcean_Droplet_Setup

    git config --global user.name "Leighton"
    git config --global user.email gracetown@protonmail.com

    log "Decrypting .env file..."
    read -rs -p "Enter the password: " password
    echo
    openssl enc -aes-256-cbc -d -in "$repos_dir/My_Random_Scripts/.env.enc" -out "$HOME_DIR/mycode/.env" -k "$password"
    if [ -e "$HOME_DIR/mycode/.env" ]; then
        log ".env file installed successfully"
    else
        log ".env file failed to decrypt successfully"
    fi

    printf "${RED}This should be in red to prove .env is working${NORMAL}\n"
}

install_all() {
    system_update
    install_misc
    install_tmux
    add_to_bashrc
    install_nano
    install_python
    install_golang
    install_nse_scripts
    install_lsd
    setup_synlincs
    clone_repos
}

show_menu() {
    clear
    echo "Select an option to install:"
    echo "1. System Update"
    echo "2. Install Miscellaneous Tools"
    echo "3. Install Tmux"
    echo "4. Add Configurations to .bashrc"
    echo "5. Install Nano"
    echo "6. Install Python and Pip"
    echo "7. Install Go"
    echo "8. Copy NSE Scripts"
    echo "9. Install lsd"
    echo "10. Setup Symbolic Links"
    echo "11. Clone GitHub Repositories"
    echo "12. Run All Installations"
    echo "13. Exit"
}

main_menu() {
    while true; do
        show_menu
        read -rp "Enter your choice [1-13]: " choice
        case $choice in
            1) system_update ;;
            2) install_misc ;;
            3) install_tmux ;;
            4) add_to_bashrc ;;
            5) install_nano ;;
            6) install_python ;;
            7) install_golang ;;
            8) install_nse_scripts ;;
            9) install_lsd ;;
            10) setup_synlincs ;;
            11) clone_repos ;;
            12) install_all ;;
            13) exit 0 ;;
            *) echo "Invalid choice. Please try again." ;;
        esac
    done
}

# Prompt for sudo password and start background process to keep that alive
sudo -v
( while true; do sleep 60; sudo -nv; done ) &
SUDO_KEEPALIVE_PID=$!

compute_start_time
main_menu

finish_time=$(date +%s)
log "Script finished at $finish_time"
elapsed=$(( finish_time - start_time ))
printf "\n${CYAN}Finished - Runtime = Elapsed: %d seconds${NORMAL}\n" "$elapsed"

echo -e "\nâœ… THE END OF THE SCRIPT"
